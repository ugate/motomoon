<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="description" content="Motomoon WiFi LED control">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="Motomoon">
  <link rel="apple-touch-icon-precomposed" href="/favicon.png">
  <meta name="msapplication-TileImage" content="/favicon.png">
  <meta name="msapplication-TileColor" content="#3372DF">
  <link rel="shortcut icon" href="/favicon.png">
  <link rel="manifest" href="/manifest.json">
  <title>MotoMoon</title>
  <style>
    html, body {font-family:'Roboto', sans-serif;font-size:14px;font-weight:400;line-height:20px;}
    html {width:100%;height:100%;color:rgba(0,0,0,.87);-ms-touch-action:manipulation;touch-action:manipulation;}
    body {margin:0;width:100%;min-height:100%;background-color:#f5f5f5 !important;}
    ::selection {background:#b3d4fc;text-shadow:none;} .hide {display:none;}
    .logo {width:7rem;height:7rem;position:absolute;top:-3em;left:calc((100vw / 2) - 3.5em);z-index:1;}
    label.logo {top:-2em;text-align:center;width:25em;height:3em;word-spacing:7em;transform:translateX(-35%);}
    label.logo a {text-decoration:none;transform:perspective(2.5em) rotateX(15deg) scaleY(0.8);transition:all 0.5s;
    display:inline-block;text-align:center;font-size:4em;font-weight:700;line-height:0.5;color:#08e3ff;
    text-shadow:0 -1px 15px rgba(0, 0, 0, 0.9), 0 1px 0 #005d64, 0 3px 0 #006269, 0 5px 0 #00676e, 0 7px 0 #006c73, 0 9px 0 #007178, 0 6px 50px rgba(59, 233, 255, 0.8);}
    label.logo a:first-line {font-size:0.8em;} label.logo a:hover {transform:perspective(8em) rotateX(11deg) scale(1.2);
    text-shadow:0 -1px 15px black, 0 1px 0 #005d64, 0 2px 0 #006269, 0 0px 0 #00676e, 0 1px 0 #006c73, 0 2px 0 #007178, 0 2px 30px rgba(59, 233, 255, 0.6);}
    @media (max-width: 479px) {img.logo {width:5rem;height:5em;left:calc((100vw / 2) - 2.5em);} label.logo {font-size:.7em}}
    .shadow {box-shadow:0 4px 5px 0 rgba(0,0,0,.14), 0 1px 10px 0 rgba(0,0,0,.12), 0 2px 4px -1px rgba(0,0,0,.2);}
    .white {background-color:#fff !important;} .blue-grey {background-color:#263238 !important;}
    .grey {background-color:#424242 !important;} .grey-text {color:#424242 !important;} .white-text {color:#fff !important;} .red {background:#E91E63 !important;}
    .ribbon {position:fixed;width:100%;height:40vh;flex-shrink:0;} .overlay {top:0;left:0;position:fixed;width:100vw;height:200vh;background:rgba(0,0,0,.5);transform:translateY(-50%);}
    .loader {position:relative;margin:0 auto;width:100px;height:100%;} .loader:before {content:'';display:block;padding-top:100%;}
    .loader-circular {animation:rotate 2s linear infinite;height:100%;transform-origin:center center;width:140px;position:absolute;top:100px;bottom:0;left:-20px;right:0;margin:auto;}
    @media (max-width: 479px) {.loader-circular {width: 90px;top: 70px;left: 0px;}}
    .loader-path {stroke-dasharray:1, 200;stroke-linecap: round;stroke-dashoffset:0;animation:dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;}
    @keyframes rotate { 100% {transform:rotate(360deg);}}@keyframes dash { 0% {stroke-dasharray:1, 200;stroke-dashoffset:0;} 50% {stroke-dasharray:89, 200;stroke-dashoffset:-35px;}
    100% {stroke-dasharray:89, 200;stroke-dashoffset:-124px;}}
    @keyframes color { 100%, 0% {stroke:#FF1744;} 40% {stroke:#D500F9;} 66% {stroke:#76FF03;} 80%, 90% {stroke:#FFA700;}}
    .no-select {-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}
    #snackbar { border: none;position: fixed;right: 0;left: 50%;z-index: 2000;bottom: -112px;min-width: 50vw;min-height: 48px;max-height: 112px;max-width: 1235px;overflow: hidden;
    padding: 14px 24px;margin: 0;border-radius: 2px;font-size: 1rem;color: white;background-color: #006064;background-clip: padding-box;box-sizing: border-box;transition: all 200ms ease-out;
    transform: translateX(-50%); cursor: pointer;} #snackbar.active {bottom: 0;} #snackbar.snackbar-error {background-color: #B71C1C;} #snackbar .snackbar-message {overflow: auto;}
    #snackbar.snackbar-header {overflow: visible;} #snackbar.snackbar-header .snackbar-head {position: absolute;top: -1.45em;left: 0;opacity: 0;font-size: 1.5em;
    background: rgba(66,66,66,1); border: none;text-align: center;padding: 0 .5em;width: 100%;transition: opacity 300ms;} #snackbar.snackbar-header.active .snackbar-head {opacity: 1;}
    @media only screen and (max-width: 600px) { #snackbar {width: 100%;margin: 0;border-radius: 0px;}} #snackbar:last-child {padding: 0 0 0 24px;float: right;color: #ffeb3b;
    text-decoration: none;text-transform: uppercase;} .snackbar-msg {display: none;}
    .unload-bar {position: absolute;background-color: black;width: 100%;height: 3px;top: 0;left: 0;animation: unloadbar 2s linear 1 forwards;}
    #snackbar:hover .unload-bar {animation: none;} @keyframes unloadbar { 0% {width: 100%;} 100% {width: 0px;}}
    .switch {position:relative;display:inline-block;width:60px;height:34px;} .switch input {display:none;}
    .slider {position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#B71C1C;-webkit-transition:.2s;transition:.2s;}
    .slider:before {position:absolute;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:white;-webkit-transition:.2s;transition:.2s;}
    input:checked + .slider {background-color:#00C853;} input:focus + .slider {box-shadow:0 0 1px #00C853;}
    input:checked + .slider:before {-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px);}
    .slider.round {border-radius:34px;} .slider.round:before {border-radius:50%;}
    main {position:relative;top:3em;flex-shrink:0;flex-grow:1;-webkit-overflow-scrolling:touch;}
    main > div {max-width:1600px;width:calc(100% - 16px);margin:0px auto;display:flex;flex-flow:row wrap;align-items:stretch;}
    @media (max-width: 479px) {main > div {padding:8px;}}
    @media (min-width: 840px) {main > div {padding:8px;}}
    @media (max-width: 839px) and (min-width: 480px) {main > div {padding:8px;}}
    @media (max-width: 479px) {.margin {width:calc(50% - 16px);display:none !important;margin:8px;box-sizing:border-box;}}
    @media (max-width: 839px) and (min-width: 480px) {.margin {width:calc(25% - 16px);display:none !important;margin:8px;box-sizing:border-box;}}
    @media (min-width: 840px) {.margin {width:calc(16.6666666667% - 16px);margin:8px;box-sizing:border-box;}}
    .content {min-height:calc(100vh - 15vh);margin-bottom:80px;border-radius:2px;box-sizing:border-box;}
    .menu {position:relative;width:100%;text-align:center;padding:1.5em 0 1.2em 0;background:#03A9F4;}
    .btn-icon {font-size:1.3em;padding:1em .2em .3em .3em;color:white;fill:white;line-height:1.25em;vertical-align:bottom;border:4px solid transparent;border-radius:50%;}
    .btn-icon.active {border:4px solid #00E5FF;}
    @media (min-width: 840px) {.content {width:calc(66.6666666667% - 16px);margin:8px;}}
    @media (max-width: 839px) and (min-width: 480px) {.content {width:calc(100% - 16px);margin:8px;} .instruct {font-size:1.5em !important;}}
    @media (max-width: 479px) {.content {width:calc(100% - 16px);margin:8px;} .instruct {font-size:1em !important;}}
    ul, ol {font-size:14px;line-height:24px;font-weight:400;letter-spacing:0;} .instruct {text-align:center;width:100%;background:#3F51B5;color:#fff;font-size:1.7em;padding:1em 0;}
    a {color:rgb(255,82,82);font-weight: 500;}
    a, button, checkbox, .icon-toggle, radio, .slider, .switch {-webkit-tap-highlight-color:transparent;-webkit-tap-highlight-color:rgba(255,255,255,0);}
    button, input {overflow:visible;} button, input, optgroup, select, textarea {font-family:sans-serif;font-size:100%;line-height:1.15;margin:0;}
    .center {display:flex;flex-flow:row nowrap;align-items:center;justify-content:center;} .container {padding:1rem 2rem;font-size:1.5em;text-align:center;}
    input, select, textarea, body *,input::after,input::before,select::after,select::before,textarea::after,textarea::before {box-sizing:border-box;}
    .vcol {margin:1em 0 2em 0;} .vcol > * {padding:0 0 1em 0;}
    .form-radio, .md-grp {position:relative;margin-top:2.25em;margin-bottom:2.25em;} .md-grp input {height:1.9rem;} .md-grp textarea {resize:none;}
    .md-grp .bar {position:relative;border-bottom:0.0625em solid #999;display:block;}
    .md-grp .bar::before {content:'';height:0.125em;width:0;left:50%;bottom:-0.0625em;position:absolute;background:#03A9F4;transition:left 0.28s ease, width 0.28s ease;}
    .md-grp select {width:100%;font-size:1em;height:1.6em;padding:0.125em 0.125em 0.0625em;background:none;border:none;line-height:1.6;box-shadow:none;}
    .md-grp label:not(.switch) {position:absolute;top:0.25em;left:0;width:100%;pointer-events:none;padding-left:0.125em;z-index:1;color:#b3b3b3;font-size:1em;font-weight:normal;transition:all 180ms cubic-bezier(0.4, 0, 0.2, 1);}
    .md-grp input, .md-grp textarea {display:block;background:none;padding:0.125em 0.125em 0.0625em;font-size:1em;border-width:0;border-color:transparent;line-height:1.9;
    width:100%;transition:all 0.28s ease;box-shadow:none;margin-bottom:.5em;} .md-grp input:invalid:not(:focus), .md-grp textarea:invalid:not(:focus) {color:transparent;}
    .md-grp select, .md-grp input:focus, .md-grp input:valid, .md-grp input.has-value, .md-grp textarea:focus, .md-grp textarea:valid, .md-grp textarea.has-value {color:#333;}
    .md-grp select ~ label, .md-grp input:focus ~ label, .md-grp input:valid ~ label, .md-grp input.has-value ~ label, .md-grp textarea:focus ~ label,
    .md-grp textarea:valid ~ label, .md-grp textarea.has-value ~ label {font-size:0.8em;color:grey;top:-1.5em;left:0;}
    .md-grp input:placeholder-shown ~ label, .md-grp textarea:placeholder-shown ~ label {top:0.25em !important;}
    .md-grp input:invalid ~ label, .md-grp textarea:invalid ~ label {color:#E91E63 !important;}
    .md-grp select:invalid ~ .bar::before, .md-grp input:invalid ~ .bar::before, .md-grp textarea:invalid ~ .bar::before {width:100%;left:0;background:#E91E63;}
    .md-grp select:focus, .md-grp input:focus, .md-grp textarea:focus {outline:none;} .md-grp select:focus ~ label, .md-grp input:focus ~ label, .md-grp textarea:focus ~ label {color:#03A9F4;}
    .md-grp select:focus ~ .bar::before, .md-grp input:focus ~ .bar::before, .md-grp textarea:focus ~ .bar::before {width:100%;left:0;}
    button {border:none;cursor:pointer;color:white;padding:15px 40px;border-radius:2px;box-shadow:2px 2px 4px rgba(0, 0, 0, .4);background:#03A9F4;position:relative;overflow:hidden;}
    button:after {content:'';position:absolute;top:50%;left:50%;width:5px;height:5px;background:rgba(255, 255, 255, .5);opacity:0;border-radius:100%;transform:scale(1, 1) translate(-50%);transform-origin:50% 50%;}
    button:focus:not(:active)::after {animation:ripple 500ms ease-out;} @keyframes ripple { 0% {transform:scale(0, 0);opacity:1;} 20% {transform:scale(25, 25);opacity:1;} 100% {opacity:0;transform:scale(40, 40);}}
  </style>
</head>
<body class="grey" onload="mm.loaded()">
  <div class="ribbon blue-grey"></div>
  <main>
    <div>
      <div class="margin"></div>
      <img src="/favicon.png" class="logo">
      <label class="logo">
        <a href="/">Moto Moon</a>
      </label>
      <div class="content shadow white grey-text">
        <div class="menu" id="menu">
          <b class="btn-icon" title="WiFi Credentials" data-view="setup" onclick="mm.formRequest(event)"
            data-req-action="/setup">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 600 445">
              <g transform="translate(0,445) scale(0.1,-0.1)">
              <path d="M1008 4431 c-77 -31 -113 -58 -199 -149 -419 -448 -681 -983 -780 -1597 -27 -167 -37 -565 -20 -752 62 -657 352 -1297 803 -1769 117 -122 180 -156 299 -162 107 -5 174 13 251 67 135 98 190 286 129 444 -22 57 -44 85 -197 257 -150 169 -312 442 -398 673 -149 397 -179 880 -80 1296 89 378 275 723 552 1023 93 101 125 154 143 240 35 161 -58 346 -209 416 -77 35 -223 42 -294 13z"/>
              <path d="M4729 4432 c-175 -71 -274 -246 -240 -423 18 -91 48 -142 141 -244 170 -185 274 -333 375 -535 163 -325 235 -637 235 -1008 -1 -352 -68 -652 -214 -957 -106 -220 -223 -392 -394 -577 -49 -53 -99 -117 -111 -143 -91 -194 -14 -418 175 -511 54 -26 68 -29 164 -29 99 0 109 2 172 33 51 25 87 54 154 125 453 481 724 1067 800 1727 23 206 16 599 -15 795 -90 563 -324 1072 -692 1500 -110 128 -194 206 -255 235 -68 33 -227 39 -295 12z"/>
              <path d="M1965 3607 c-73 -24 -109 -49 -194 -131 -247 -240 -415 -549 -493 -906 -20 -93 -22 -133 -22 -345 0 -212 2 -252 22 -345 79 -362 245 -666 500 -913 112 -108 165 -132 297 -132 88 0 107 3 157 27 197 92 276 313 184 513 -15 33 -55 86 -107 140 -140 145 -211 262 -265 440 -26 84 -28 102 -28 270 0 168 2 186 28 270 30 98 86 217 137 292 18 26 73 89 121 140 98 103 131 160 148 252 21 118 -12 230 -97 321 -77 84 -141 113 -258 117 -56 2 -105 -2 -130 -10z"/>
              <path d="M3809 3606 c-74 -29 -116 -56 -162 -105 -109 -116 -133 -283 -61 -428 14 -30 60 -89 105 -136 136 -140 211 -266 266 -446 25 -80 27 -99 27 -266 0 -168 -2 -186 -28 -270 -30 -98 -86 -217 -137 -292 -18 -26 -73 -89 -121 -140 -98 -103 -131 -160 -148 -252 -29 -162 56 -330 207 -406 53 -28 67 -30 163 -30 99 0 110 2 171 32 105 52 282 244 401 435 105 169 184 369 230 578 20 93 22 133 22 345 0 212 -2 252 -22 344 -80 366 -244 666 -500 914 -106 103 -165 130 -287 134 -59 2 -102 -2 -126 -11z"/>
              <path d="M2858 2661 c-164 -53 -284 -195 -311 -370 -35 -229 120 -459 344 -510 162 -38 339 16 447 134 224 247 117 648 -199 746 -79 25 -203 24 -281 0z"/>
              </g>
            </svg>
          </b>
          <b class="btn-icon" title="Test Lights" data-view="toggle" onclick="mm.formRequest(event)"
            data-req-action="/toggle">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 600 391">
              <g transform="translate(0,391) scale(0.1,-0.1)">
              <path d="M1484 3589 c-732 -65 -1340 -627 -1464 -1353 -28 -162 -28 -400 0 -562 106 -618 579 -1141 1176 -1300 226 -60 133 -57 1699 -61 1499 -5 1630 -2 1813 37 564 119 1028 536 1213 1090 108 323 108 707 0 1030 -211 630 -758 1061 -1422 1120 -137 12 -2878 11 -3015 -1z m3058 -564 c640 -111 1042 -751 862 -1371 -107 -370 -404 -654 -789 -755 -78 -21 -112 -24 -255 -23 -145 1 -177 4 -262 27 -383 102 -682 401 -785 782 -24 90 -27 117 -27 270 0 153 3 180 27 270 35 130 119 299 201 401 245 310 646 466 1028 399z"/>
              </g>
            </svg>
          </b>
          <b class="btn-icon" title="Running Lights Animation" data-view="run" onclick="mm.formRequest(event)"
            data-req-action="/run">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 600 390">
              <g transform="translate(0,390) scale(0.1,-0.1)">
              <path d="M216 3881 c-46 -31 -66 -69 -66 -131 0 -35 6 -65 16 -80 24 -36 442 -457 488 -491 32 -24 49 -29 95 -29 63 0 101 19 132 66 24 37 26 129 3 164 -24 36 -442 457 -488 491 -32 24 -49 29 -95 29 -38 0 -65 -6 -85 -19z"></path>
              <path d="M5604 3871 c-46 -34 -464 -455 -488 -491 -23 -35 -21 -127 3 -164 31 -47 69 -66 132 -66 46 0 63 5 95 29 46 34 464 455 488 491 23 35 21 127 -3 164 -31 47 -69 66 -132 66 -46 0 -63 -5 -95 -29z"></path>
              <path d="M1362 3269 c-69 -34 -104 -71 -138 -144 l-24 -50 0 -1125 0 -1125 24 -50 c34 -73 69 -110 138 -144 57 -29 69 -31 167 -31 634 0 1203 488 1306 1120 19 122 19 338 0 460 -103 632 -672 1120 -1306 1120 -98 0 -110 -2 -167 -31z m401 -309 c96 -25 239 -90 328 -150 82 -56 213 -187 269 -269 59 -88 124 -230 152 -331 20 -74 23 -108 23 -260 0 -204 -16 -281 -89 -436 -59 -125 -115 -205 -210 -300 -177 -177 -404 -283 -646 -302 l-90 -8 0 1046 0 1046 90 -8 c50 -4 127 -16 173 -28z"></path>
              <path d="M4261 3284 c-548 -92 -1006 -554 -1096 -1104 -19 -122 -19 -338 0 -460 103 -632 672 -1120 1306 -1120 98 0 110 2 167 31 69 34 104 71 138 144 l24 50 0 1126 0 1126 -31 61 c-34 69 -71 104 -144 138 -44 21 -64 24 -165 23 -63 -1 -153 -7 -199 -15z m239 -1332 l0 -1048 -90 8 c-171 13 -352 78 -501 178 -82 56 -213 187 -269 269 -59 88 -124 230 -152 331 -20 74 -23 108 -23 260 0 203 16 280 89 436 60 125 115 205 210 300 176 175 402 282 644 304 48 4 88 8 90 9 1 0 2 -471 2 -1047z"></path>
              <path d="M66 2081 c-46 -31 -66 -69 -66 -131 0 -62 20 -100 66 -131 27 -18 53 -19 384 -19 331 0 357 1 384 19 46 31 66 69 66 131 0 62 -20 100 -66 131 -27 18 -53 19 -384 19 -331 0 -357 -1 -384 -19z"></path>
              <path d="M5166 2081 c-46 -31 -66 -69 -66 -131 0 -62 20 -100 66 -131 27 -18 53 -19 384 -19 331 0 357 1 384 19 46 31 66 69 66 131 0 62 -20 100 -66 131 -27 18 -53 19 -384 19 -331 0 -357 -1 -384 -19z"></path>
              <path d="M654 721 c-46 -34 -464 -455 -488 -491 -23 -35 -21 -127 3 -164 31 -47 69 -66 132 -66 46 0 63 5 95 29 46 34 464 455 488 491 23 35 21 127 -3 164 -31 47 -69 66 -132 66 -46 0 -63 -5 -95 -29z"></path>
              <path d="M5166 731 c-46 -31 -66 -69 -66 -131 0 -35 6 -65 16 -80 24 -36 442 -457 488 -491 32 -24 49 -29 95 -29 63 0 101 19 132 66 24 37 26 129 3 164 -24 36 -442 457 -488 491 -32 24 -49 29 -95 29 -38 0 -65 -6 -85 -19z"></path>
              </g>
            </svg>
          </b>
          <b class="btn-icon" title="Brake Light Animation" data-view="brake" onclick="mm.formRequest(event)"
            data-req-action="/brake">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 600 390">
              <g transform="translate(0,390) scale(0.1,-0.1)">
              <path d="M216 3881 c-46 -31 -66 -69 -66 -131 0 -35 6 -65 16 -80 24 -36 442 -457 488 -491 32 -24 49 -29 95 -29 63 0 101 19 132 66 24 37 26 129 3 164 -24 36 -442 457 -488 491 -32 24 -49 29 -95 29 -38 0 -65 -6 -85 -19z"></path>
              <path d="M5604 3871 c-46 -34 -464 -455 -488 -491 -23 -35 -21 -127 3 -164 31 -47 69 -66 132 -66 46 0 63 5 95 29 46 34 464 455 488 491 23 35 21 127 -3 164 -31 47 -69 66 -132 66 -46 0 -63 -5 -95 -29z"></path>
              <path d="M1362 3269 c-69 -34 -104 -71 -138 -144 l-24 -50 0 -1125 0 -1125 24 -50 c34 -73 69 -110 138 -144 57 -29 69 -31 167 -31 634 0 1203 488 1306 1120 19 122 19 338 0 460 -103 632 -672 1120 -1306 1120 -98 0 -110 -2 -167 -31z"></path>
              <path d="M4261 3284 c-548 -92 -1006 -554 -1096 -1104 -19 -122 -19 -338 0 -460 103 -632 672 -1120 1306 -1120 98 0 110 2 167 31 69 34 104 71 138 144 l24 50 0 1126 0 1126 -31 61 c-34 69 -71 104 -144 138 -44 21 -64 24 -165 23 -63 -1 -153 -7 -199 -15z"></path>
              <path d="M66 2081 c-46 -31 -66 -69 -66 -131 0 -62 20 -100 66 -131 27 -18 53 -19 384 -19 331 0 357 1 384 19 46 31 66 69 66 131 0 62 -20 100 -66 131 -27 18 -53 19 -384 19 -331 0 -357 -1 -384 -19z"></path>
              <path d="M5166 2081 c-46 -31 -66 -69 -66 -131 0 -62 20 -100 66 -131 27 -18 53 -19 384 -19 331 0 357 1 384 19 46 31 66 69 66 131 0 62 -20 100 -66 131 -27 18 -53 19 -384 19 -331 0 -357 -1 -384 -19z"></path>
              <path d="M654 721 c-46 -34 -464 -455 -488 -491 -23 -35 -21 -127 3 -164 31 -47 69 -66 132 -66 46 0 63 5 95 29 46 34 464 455 488 491 23 35 21 127 -3 164 -31 47 -69 66 -132 66 -46 0 -63 -5 -95 -29z"></path>
              <path d="M5166 731 c-46 -31 -66 -69 -66 -131 0 -35 6 -65 16 -80 24 -36 442 -457 488 -491 32 -24 49 -29 95 -29 63 0 101 19 132 66 24 37 26 129 3 164 -24 36 -442 457 -488 491 -32 24 -49 29 -95 29 -38 0 -65 -6 -85 -19z"></path>
              </g>
            </svg>
          </b>
          <b class="btn-icon" title="Turn Signal Animation" data-view="turn" onclick="mm.formRequest(event)"
            data-req-action="/turn">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="24" viewBox="0 0 40 26">
              <polygon transform="translate(-15,-22)" id="polygon5" points="24.64,26.46 15,35.33 24.64,43.81 24.64,39.76 32.35,39.76 32.35,30.7 32.35,30.7 24.64,30.7 "/>
              <polygon transform="translate(-15,-22)" id="polygon7" points="45.36,30.24 37.65,30.24 37.65,39.3 45.36,39.3 45.36,43.54 55,34.67 55,34.67 45.36,26.19 "/>
            </svg>
          </b>
        </div>
        <data id="viewer"></div>
        <div class="overlay" id="loader">
          <div class="center loader">
            <svg class="loader-circular" viewBox="25 25 50 50">
              <circle class="loader-path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </main>
  <div class="hide view" id="setup">
    <div class="instruct">
      WiFi Setup
    </div>
    <div class="container">
      <div class="md-grp">
        <input type="text" placeholder=" " minlength="3" required="required" id="ssid">
        <label for="ssid">SSID Name</label><i class="bar"></i>
      </div>
      <div class="md-grp">
        <input type="password" placeholder=" " minlength="8" required="required" id="password">
        <label for="password">SSID Password</label><i class="bar"></i>
      </div>
      <button type="button" onclick="mm.formRequest(event)"
        data-req-sel="#ssid,#password" data-req-method="POST" data-req-action="/setup">Save</button>
    </div>
  </div>
  <div class="hide view" id="reconnect">
    <div class="instruct">
      &#9995; WiFi Credentials Saved!
    </div>
    <div class="container">
      <h3>Reconnect to WiFi and refresh the page to continue</h3>
    </div>
  </div>
  <div class="hide view" id="toggle">
    <div class="container">
      <div class="vcol">
        <div>Toggle Brake lights</div>
        <label class="switch">
          <input type="checkbox" id="brakeOn" onclick="mm.formRequest(event)" value="true"
            data-req-sel="#brakeOn" data-req-method="POST" data-req-action="/toggle/apply/brake">
          <span class="slider round"></span>
        </label>
      </div>
      <div class="vcol">
        <div>Toggle Left Turn Signal</div>
        <label class="switch">
          <input type="checkbox" id="turnLeftOn" onclick="mm.formRequest(event)" value="true"
            data-req-sel="#turnLeftOn" data-req-method="POST" data-req-action="/toggle/apply/turn/left">
          <span class="slider round"></span>
        </label>
      </div>
      <div class="vcol">
        <div>Toggle Right Turn Signal</div>
        <label class="switch">
          <input type="checkbox" id="turnRightOn" onclick="mm.formRequest(event)" value="true"
            data-req-sel="#turnRightOn" data-req-method="POST" data-req-action="/toggle/apply/turn/right">
          <span class="slider round"></span>
        </label>
      </div>
    </div>
  </div>
  <div class="hide view" id="run">
    <div class="container">
      <div class="md-grp">
        <select id="lightType" class="browser-default" onchange="mm.viewSelection(event)">
          <option value="" disabled selected hidden>Select a running light animation</option>
          <option value="one">One</option>
          <option value="two">Two</option>
          <option value="three">Three</option>
        </select>
      </div>
    </div>
    <div class="container">
      <div class="md-grp">
        <input type="range" data-ticks-sel="#frameticks" required="required" min="1" max="30" value="1" name="frame" id="frame">
        <label for="frame">Amination Frame</label><i class="bar"></i>
        <datalist id="frameticks"></datalist>
      </div>
      <button type="submit">Save</button>
    </div>
  </div>
  <div class="hide view" id="brake">
    <div class="container">
      <div class="md-grp">
        <select id="lightType" class="browser-default" onchange="mm.viewSelection(event)">
          <option value="" disabled selected hidden>Select a brake animation</option>
          <option value="one">One</option>
          <option value="two">Two</option>
          <option value="three">Three</option>
        </select>
      </div>
    </div>
    <div class="container">
      <div class="md-grp">
        <input type="range" data-ticks-sel="#frameticks" required="required" min="1" max="30" value="1" name="frame" id="frame">
        <label for="frame">Amination Frame</label><i class="bar"></i>
        <datalist id="frameticks"></datalist>
      </div>
      <button type="submit">Save</button>
    </div>
  </div>
  <div class="hide view" id="turn">
    <div class="container">
      <div class="md-grp">
        <select id="lightType" class="browser-default" onchange="mm.viewSelection(event)">
          <option value="" disabled selected hidden>Select a turn signal animation</option>
          <option value="one">One</option>
          <option value="two">Two</option>
          <option value="three">Three</option>
        </select>
      </div>
    </div>
    <div class="container">
      <div class="md-grp">
        <input type="range" data-ticks-sel="#frameticks" required="required" min="1" max="30" value="1" name="frame" id="frame">
        <label for="frame">Amination Frame</label><i class="bar"></i>
        <datalist id="frameticks"></datalist>
      </div>
      <button type="submit">Save</button>
    </div>
  </div>
  <div id="snackbar" class="no-select">
    <div class="unload-bar"></div>
    <span>TEMPLATE</span>
    <a href="#">DONE</a>
  </div>
  <script>
    var mm = new MM();
    function MM() {
      this.loader = null;
      this.animEndEvents = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
      this.snackbarTkoHandles = [];
      this.snackbarShowDelay = 7000;
      this.snackbarQueue = [];
    }
    MM.prototype.loaded = function loaded() {
      var mmi = this;
      mmi.views = {};
      mmi.viewer = mmi.viewer || document.getElementById('viewer');
      mmi.loader = mmi.loader || document.getElementById('loader');
      mmi.menus = mmi.menus || document.querySelectorAll('#menu .btn-icon');
      for (var i = 0, vws = document.querySelectorAll('.view'); vws && vws[i]; ++i) {
        if (!vws[i].id) continue;
        vws[i].className = 'view';
        mmi.views[vws[i].id] = vws[i].parentNode.removeChild(vws[i]);
      }
      mmi.request('GET', '/setup');
    };
    MM.prototype.loadbar = function loadbar(hide) {
      this.loader.classList[hide ? 'add' : 'remove']('hide');
    };
    MM.prototype.viewSelection = function viewSelection(event) {
      var trg = event && event.currentTarget, json = {};
      if (trg && trg.dataset.view) json[trg.dataset.view] = {};
      if (trg && trg.value) json[trg.value] = {};
      this.view(json);
    };
    MM.prototype.view = function view(json, req, opts, cb) {
      var mmi = this, isInit = true;
      for (var nm in json) if (mmi.views[nm]) {
        if (isInit && !(isInit = false)) mmi.viewer.innerHTML = '';
        mmi.viewer.appendChild(mmi.views[nm]);
        mmi.fillify(mmi.views[nm], json[nm]);
        var unlock = json[nm]._conf && json[nm]._conf.menuUnlock;
        for (var li = 0; li < mmi.menus.length; ++li) {
          if (nm === mmi.menus[li].dataset.view) mmi.clazzList(mmi.menus[li]).add('active');
          else mmi.clazzList(mmi.menus[li]).remove('active');
          if (unlock) mmi.clazzList(mmi.menus[li]).remove('hide');
        }
      }
      if (!opts.noLoading) mmi.loadbar(true);
      if (json.message || json.error) mmi.snackbar(null, mmi.messageJSON(json.message, json.error, json.isError ? 'snackbar-error' : null, req, json));
      if (typeof cb === 'function') cb(json, req);
    };
    MM.prototype.fillify = function fillify(el, json) {
      for (var i = 0, dta, els = el instanceof Element ? el.querySelectorAll('[id],[name]') || [] : []; els[i]; ++i) {
        if (dta = json[els[i].id || els[i].name]) {
          for (var dn in dta) {
            switch (dn) {
              case 'value': case 'innerHTML': case 'innerText': case 'textContent': els[i][dn] = dta[dn]; break;
              case 'checked': els[i].checked = dta[dn] == 'true' || dta[dn] == 1; break;
              default: els[i].setAttribute(dn, dta[dn]);
            }
          }
        }
        dta = els[i].querySelectorAll('[type=range]');
        for (var j = 0, jel, oel; dta && dta[j]; ++j) {
          jel = dta[j].dataset.ticksSel && document.querySelector(dta[j].dataset.ticksSel);
          for (var k = parseInt(dta[j].min || 0), ks = k, kl = parseInt(dta[j].max || 0); k <= kl; ++k) {
            oel = document.createElement('option');
            oel.label = oel.value = k;
            jel.appendChild(oel);
          }
        }
      }
    };
    MM.prototype.formRequest = function formRequest(event, opts, cb) {
      var mmi = this, trg = event.currentTarget, els = document.querySelectorAll(trg.dataset.reqSel), pyld = {}, valid = true;
      for (var i = 0; i < els.length; ++i) {
        if (els[i].reportValidity && !els[i].reportValidity()) valid = false;
        if ((els[i].type !== 'checkbox' && els[i].type !== 'radio') || els[i].checked) pyld[els[i].id || els[i].name] = els[i].value;
        if (els[i].type && els[i].type.toLowerCase() == 'password') els[i].value = '';
      }
      if (!valid) return;
      if (window.scroll) window.scroll(0, 0);
      mmi.request(trg.dataset.reqMethod, trg.dataset.reqAction, pyld, opts, cb);
    };
    MM.prototype.request = function request(method, url, payload, opts, cb) {
      if (!url || url.indexOf('?') > 0) throw new Error('Invlaid URL (parameters should be passed in payload): ' + url);
      opts = opts || {};
      // form.checkValidity() form.reportValidity()
      method = (method || 'GET').toUpperCase();
      var mmi = this, req = new XMLHttpRequest();
      if (!opts.noLoading) mmi.loadbar();
      req.onreadystatechange = function response() {
        if (req.readyState === XMLHttpRequest.DONE) {
          var ctyp = req.getResponseHeader('content-type'), json;
          if (ctyp && ctyp.toLowerCase().indexOf('json') >= 0) try {
            json = JSON.parse(req.responseText);
            if (req.status === 0 || req.status !== 200) json = { error: new Error((req.statusText) + ': ' + json.message + ' URL ' + url), isError: true };
            else if (json && json.isError && json.message) json.error = new Error(json.message);
          } catch (e) {
            e.cause = 'JSON.parse error for response from URL ' + url;
            json = { error: e, isError: true };
          } else if (req.status === 0 || req.status !== 200) json = { error: new Error((req.statusText || 'Request Access Denied to ') + ' URL ' + url), isError: true };
          else json = { message: req.responseText };
          mmi.view(json, req, opts, cb);
          if (!opts.noLoading) mmi.loadbar(true);
        }
      };
      req.onerror = function responseError(e) {
        if (req.status === 401) window.location.reload(); // session expired
        if (!opts.ignoreErrors) console.error(req.statusText || e);
        if (!opts.noLoading) mmi.loadbar(true);
      };
      payload = payload || {};
      req.withCredentials = opts.withCredentials;
      if (!opts.useJSON) {
        var params = '';
        if (payload) for (var pk in payload) params += (params.length ? '&' : method === 'GET' ? '?' : '') + encodeURIComponent(pk) + '=' + encodeURIComponent(payload[pk]);
        if (method === 'GET') {
          req.open(method, url + params, true);
          req.send(null);
        } else {
          req.open(method, url, true);
          req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
          req.send(params);
        }
      } else {
        req.open(method, url, true);
        req.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
        req.send(JSON.stringify(payload));
      }
      return req;
    };
    MM.prototype.reqJSON = function reqJSON(req, altMsg) {
      var mmi = this, ctyp = req.getResponseHeader('content-type'), json;
      if (ctyp && ctyp.toLowerCase().indexOf('json') >= 0) try {
        json = JSON.parse(req.responseText);
        json._res = { jsonContent: true };
        mmi.messageJSON(null, null, null, req, json);
      } catch (e) {
        json = mmi.messageJSON(altMsg || 'JSON.parse Error', e, null, req);
      } else json = mmi.messageJSON(altMsg || ctyp + ' is not a JSON response', null, null, req);
      return json;
    };
    MM.prototype.messageJSON = function messageJSON(msg, msgObj, msgClass, req, obj) {
      var typ = typeof obj;
      obj = (typ === 'object' && obj) || (typ === 'string' && { _res: { message: obj } }) || {};
      obj._res = obj._res || {};
      obj._res.message = obj._res.message || obj.message || msg || (msgObj && msgObj.message);
      obj._res.messageClass = (msgClass || '').trim();
      obj._res.statusCode = obj._res.statusCode || obj.statusCode || (req ? req.status : null);
      obj._res.error = obj._res.error instanceof Error ? obj._res.error : obj.error instanceof Error ? obj.error : msgObj instanceof Error ? msgObj : obj._res.statusCode && obj._res.statusCode !== 200 ? new Error(obj._res.message) : null;
      obj._res.cause = obj._res.error && obj._res.error !== obj._res.error.cause && obj._res.error.cause;
      obj._res.date = obj._res.date || obj.date || new Date();
      obj._res.timeStamp = obj._res.timeStamp || obj.timeStamp || obj._res.date.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, "$1$3");
      obj._res.messageFull = obj._res.messageFull || obj.messageFull || ((obj._res.statusCode ? (obj._res.statusCode === 200 && 'INFO') || ('HTTP ' + obj._res.statusCode) : obj._res.error ? 'ERROR' : '') + ' (' + obj._res.timeStamp + '): ' + obj._res.message
        + (obj._res.error && obj._res.message.trim() !== obj._res.error.message.trim() ? ' CAUSE: ' + obj._res.error : ''));
      obj._res.jsonContent = obj._res.jsonContent || obj.jsonContent;
      return obj;
    };
    MM.prototype.onWithTimeout = function onWithTimeout(el, evts, tko, once, cb) {
      var mmi = this, tmh, fn = function timer() {
        clearTimeout(tmh);
        if (once) mmi.at(el, evts, undefined, true, fn);
        if (arguments.length) cb.apply(this, arguments);
        else cb();
      };
      mmi.at(el, evts, undefined, false, fn);
      return tmh = setTimeout(fn, tko);
    };
    MM.prototype.at = function at(el, evts, useCapture, rm, fn) {
      if (el && evts && fn) for (var i = 0, es = evts.split(' '), l = es.length; i < l; ++i) {
        if (rm) el.removeEventListener(es[i], fn);
        else el.addEventListener(es[i], fn, useCapture);
      }
    };
    MM.prototype.colorBlend = function colorBlend(percentage, fromColor, toColor) {
      var mmi = this, p = percentage, from = fromColor, to = toColor;
      if (typeof(p) != 'number' || p <- 1 || p > 1 || typeof(from) != 'string' || (from[0] != 'r' && from[0] != '#') || (to && typeof(to) != 'string')) return null;
      var h = typeof(to) === 'string' ? to.length > 9 ? true : to === 'c' ? from.length <= 9 : false : from.length > 9;
      var b = p < 0, p = b ? p * -1 : p, to = to && to != 'c' ? to : b ? '#000000' : '#FFFFFF';
      var f = from && typeof(from) === 'object' ? from : mmi.colorParts(from), t = to && typeof(to) === 'object' ? to : mmi.colorParts(to);
      if (!f || !t) return null;
      if (h) return 'rgb' + (f.a > -1 || t.a >- 1 ? 'a(' : '(') + Math.round((t.r - f.r) * p + f.r) + ',' + Math.round((t.g - f.g) * p + f.g)
        + ',' + Math.round((t.b - f.b) * p + f.b) + (f.a < 0 && t.a < 0 ? ')' : ','
        + (f.a > -1 && t.a > -1 ? Math.round(((t.a - f.a) * p + f.a) * 10000) / 10000 : t.a < 0 ? f.a : t.a) + ')');
      else return '#' + (0x100000000 + Math.round((t.r - f.r) * p + f.r) * 0x1000000 + Math.round((t.g - f.g) * p + f.g) * 0x10000
        + Math.round((t.b - f.b) * p + f.b) * 0x100 + (f.a > -1 && t.a > -1 ? Math.round(((t.a - f.a) * p + f.a) *255) : t.a > -1
        ? Math.round(t.a * 255) : f.a > -1 ? Math.round(f.a * 255) : 255)).toString(16).slice(1, f.a > -1 || t.a > -1 ? undefined : -2);
    };
    MM.prototype.colorParts = function colorParts(color) {
      var d = color, l = d.length, RGB = {};
      if (l > 9) {
        d = d.split(',');
        if (d.length < 3 || d.length > 4) return null;
        RGB.r = parseInt(d[0].split('(')[1]),
        RGB.g = parseInt(d[1]);
        RGB.b = parseInt(d[2]);
        RGB.a = d[3] ? parseFloat(d[3]) : -1;
        RGB.isHex = false;
      } else {
        if (l == 8 || l == 6 || l < 4) return null;
        if (l < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (l > 4 ? d[4] + '' + d[4] : ''); // allow for 3 or 4 digit hex values
        d = parseInt(d.slice(1), 16);
        RGB.r = d >> 16 & 255;
        RGB.g = d >> 8 & 255;
        RGB.b = d & 255;
        RGB.a = -1;
        RGB.isHex = true;
        if (l == 9 || l == 5) RGB.a = Math.round((RGB.b / 255) * 10000) / 10000;
        RGB.b = RGB.g;
        RGB.g = RGB.r;
        RGB.r = d >> 24 & 255;
      }
      return RGB;
    };
    MM.prototype.clazzList = function clazzList(el) {
      //if (el.classList) return el.classList;
      var clo = {};
      clo.clz = function(clzs, rplr) {
        var arr = typeof rplr === 'boolean' ? Array.prototype.slice.call(clzs) : null, rm = rplr;
        if (arr) rplr = function addrm(mtch, cn) {
          arr.splice(arr.indexOf(cn), 1);
          return rm ? '' : mtch;
        };
        for (var i = 0, l = clzs.length, isStr, val; i < l; ++i) {
          clo.setClz(el, clzs[i], rplr);
        }
        return arr;
      };
      clo.setClz = function(el, cl, rplr) {
        for (var i = 0, els = el instanceof Element ? [el] : el, ncl; i < els.length; ++i) {
          var isStr = typeof els[i].className === 'string', rtyp = typeof rplr; // some elements don't support className the same way (e.g. svg)
          var val = isStr ? els[i].className : els[i].getAttribute('class') || '';
          ncl = cl && Array.isArray(cl) ? cl[i] || cl.join(' ') : cl; // try to match the element index with the passed class index or use all of the classes in combo
          if (rtyp === 'string' || rtyp === 'function') val = val.replace(new RegExp('\\s*(' + ncl + ')\\s*', 'gi'), rplr);
          else if (ncl) val += ' ' + ncl + ' ';
          if (isStr) els[i].className = val;
          else els[i].setAttribute('class', val);
        }
      };
      return {
        has: function hasClass(clz, all) {
          if (!clz) return false;
          for (var i = 0, els = el instanceof Element ? [el] : el, match = ' ' + clz + ' ', isMatch, mcnt = 0; i < els.length; ++i) {
            isMatch = (' ' + els[i].className + ' ').replace(/[\n\t]/g, ' ').indexOf(match) > -1;
            if ((!all && isMatch) || (all && !isMatch)) return isMatch;
            if (isMatch) ++mcnt;
          }
          return mcnt === els.length;
        },
        remove: function rmer() {
          clo.clz(arguments, ' ');
        },
        add: function addClass() {
          for (var i = 0, clzs = clo.clz(arguments, false), l = clzs.length; i < l; ++i) {
            clo.setClz(el, clzs[i]);
          }
        },
        toggle: function tger() {
          for (var i = 0, clzs = clo.clz(arguments, true), l = clzs.length; i < l; ++i) {
            clo.setClz(el, clzs[i]);
          }
        }
      };
    };
    MM.prototype.snackbar = function snackbar(req, json, url, label, altMsg, hideCb) {
      var mdi = this;
      json = json || mdi.reqJSON(req, altMsg);
      if (mdi.snackbarInProgress) {
        mdi.snackbarQueue.push(arguments);
        return json;
      }
      mdi.snackbarInProgress = true;
      var sbo = document.querySelector('#snackbar'), sb = sbo.cloneNode(true);
      var ulb = sb.querySelector('.unload-bar'), txt = sb.querySelector('span'), lnk = sb.querySelector('a'), sbCL = mdi.clazzList(sb);
      sb.className = ''; // reset CSS classes
      if (json._res && json._res.messageClass) sbCL.add(json._res.messageClass);
      if (json instanceof Error || (json._res && json._res.error)) {
        sbCL.add('snackbar-error');
        if (json._res) {
          console.error(json._res.error);
          if (json._res.cause) console.error(json._res.cause);
        } else console.error(json);
      }
      var isError = sbCL.has('snackbar-error');
      sbo.parentNode.replaceChild(sb, sbo); // ensure there are no pending listeners
      for (var i = 0, l = mdi.snackbarTkoHandles.length; i < l; ++i) {
        clearTimeout(mdi.snackbarTkoHandles[i]); // ensure there are no pending timeouts
      }
      mdi.snackbarTkoHandles.length = 0;
      //var dim = { height: sb.clientHeight + 1, width: sb.clientWidth + 1 };
      txt.innerText = (json._res && json._res.messageFull) || json.message;
      console.log(txt.innerText);
      if (lnk && url && label) {
        lnk.innerText = label;
        lnk.setAttribute('href', url);
        lnk.style.display = 'inline-block';
      } else if (lnk) lnk.style.display = 'none';
      var tch = 'ontouchstart' in window || navigator.msMaxTouchPoints, pan = { dir: 'Right' }, tko = !tch || window.Modernizr ? 100 : 4000;
      if (tch) mdi.at(sb, 'pan', false, function (ev) {
        if (ev.gesture.pointerType === 'touch') {
          pan.dirVal = ev.gesture.direction;
          pan.x = ev.gesture.deltaX;
          pan.velocityX = ev.gesture.velocityX;
          pan.dir = pan.dirVal === 4 ? 'Left' : pan.dirVal === 2 ? 'Right' : pan.dir;
          pan.swipeLeft = pan.dir === 'Left' && (pan.x > (-1 * sb.offsetWidth / 2) || pan.velocityX < -0.75);
          pan.swipeRight = !pan.swipeLeft && pan.dir === 'Right' && (pan.x < (-1 * sb.offestWidth / 2) || pan.velocityX > 0.75);
        }
      });
      var snh = {}, hideHandle, closing;
      if (ulb) {
        var ulbs = getComputedStyle(sb);
        ulb.style.backgroundColor = mdi.colorBlend(-.5, ulbs.getPropertyValue('background-color'), ulbs.getPropertyValue('color'));
      }
      snh.showAutoHide = function(noInit) {
        var sbShowDelay = isError ? mdi.snackbarShowDelayError : mdi.snackbarShowDelay;
        if (!noInit && ulb) ulb.style.animationDuration = sbShowDelay + 'ms';
        if (!noInit) sbCL.add('active');
        clearTimeout(hideHandle);
        mdi.snackbarTkoHandles.push(hideHandle = setTimeout(snh.snackbarHide, sbShowDelay));
      };
      snh.snackbarHide = function() {
        if (mdi.snackbarPause) return snh.showAutoHide();
        sbCL.remove('active');
        var args = mdi.snackbarQueue.shift();
        mdi.snackbarInProgress = false;
        if (args) mdi.snackbar.apply(mdi, args);
        if (hideCb) hideCb();
      };
      sb.addEventListener(tch ? 'panend' : 'click', function snackbarCloseListener(ev) { // paning end or click will close snackbar message
        if ((!tch && ev.gesture && ev.gesture.pointerType !== 'touch') || (tch && !pan.swipeLeft && !pan.swipeRight)) return;
        closing = true;
        mdi.snackbarPause = false;
        mdi.snackbarTkoHandles.push(mdi.onWithTimeout(sb, mdi.animEndEvents, tko, true, snh.snackbarHide));
        mdi.clazzList(sb).add('animated', 'slideOut', pan.dir);
      });
      if (!tch) sb.addEventListener('mouseout', function snackbarPauseCloseListener(ev) {
        mdi.snackbarPause = false;
        if (!closing) snh.showAutoHide();
      });
      if (!tch) sb.addEventListener('mouseover', function snackbarPauseCloseListener(ev) { // allow pausing on devices with a mouse
        mdi.snackbarPause = true;
      });
      if (sbCL.has('active')) { // according to spec the snackbar should be hidden before showing again
        mdi.snackbarTkoHandles.push(mdi.onWithTimeout(sb, mdi.animEndEvents, tko, true, function snackbarReshowAnimEnd() {
          mdi.snackbarTkoHandles.push(setTimeout(snh.showAutoHide, 500)); // delay reshowing for visual affects
        }));
        sbCL.remove('active');
      } else snh.showAutoHide();
      return json;
    };
  </script>
</body>
</html>